<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[重温数组Array类型方法]]></title>
      <url>http://yoursite.com/2016/08/29/%E9%87%8D%E6%B8%A9%E6%95%B0%E7%BB%84Array%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h2><p>栈是一种LIFO（Last-In-First-Out，后进先出）的数据结构，它有两个方法 push()和pop()方法，push在数组顶部（末尾）推入数据返回数组的长度，pop在数组顶部（末尾）弹出数据然后返回移除的项。</p>
<p>下面看代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var colors = new Array();</div><div class="line">var count = colors.push(<span class="string">'red'</span>, <span class="string">'green'</span>);  //推入两项</div><div class="line">alert(count);  //2</div><div class="line"></div><div class="line">count = colors.push(<span class="string">'black'</span>);   //推入一项</div><div class="line">alert(count);</div><div class="line"></div><div class="line">var item=colors.pop();   //弹出一项</div><div class="line">alert(item)  //<span class="string">"black"</span>;</div><div class="line">alert(colors.length) //2</div></pre></td></tr></table></figure>
<h2 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h2><p>栈是一种FIFO（First-In-First-Out，先进先出）的数据结构，它有两个方法 shift()和push()方法，shift在数组的第一个项移除数据返回移除的项，ppush在数组顶部（末尾）推入数据返回数组的长度。</p>
<p>下面看代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var colors = new Array();</div><div class="line">var count = colors.push(<span class="string">'red'</span>, <span class="string">'green'</span>);  //推入两项</div><div class="line">alert(count);  //2</div><div class="line"></div><div class="line">count = colors.push(<span class="string">'black'</span>);   //推入一项</div><div class="line">alert(count); //3</div><div class="line"></div><div class="line">var item=colors.shift();   //取得第一项</div><div class="line">alert(item)  //<span class="string">"red"</span>;</div><div class="line">alert(colors.length) //2</div></pre></td></tr></table></figure>
<p>反向模拟队列，他有两个方法 unshift()和pop()方法，unshift在数组头部插入项返回数组的长度，pop在数组尾部弹出项返回弹出的项</p>
<h2 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h2><p>数组中有两个可以直接用来排序的方法：reverse()和sort();reverse()方法用来反转数组项顺序，sort()方法按升序排列数组项；</p>
<p>下面看代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var values = [0, 1, 5, 10, 15];</div><div class="line">values.sort();</div><div class="line">alert(values);  //0,1,10,15,5</div></pre></td></tr></table></figure>
<p>sort()方法比较的是字符串，这种排序方式不是最佳方案，因此sort()方法接收一个比较函数作为参数，以便判断哪个值在前面，哪个值后面；</p>
<p>下面看代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var values = [0, 1, 5, 10, 15];</div><div class="line"><span class="keyword">function</span> compare(value1,value2)&#123;</div><div class="line">	<span class="keyword">if</span>(value1&lt;value2)&#123;</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;eles <span class="keyword">if</span>(value1&gt;value2)&#123;</div><div class="line">		<span class="built_in">return</span> 1;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">return</span> 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">values.sort(compare);</div><div class="line">alert(values);  //0,1,5,10,15</div></pre></td></tr></table></figure>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>concat()方法可以基于当前数组中的所有项创建一个新数组;(基于当前数组创建副本,然后将接受到的值添加到末尾，不改变原有数组);</p>
<p>下面看代码：</p>
<pre><code class="bash">var colors=[<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];
var colors2=colors.concat(<span class="string">'yellow'</span>,[<span class="string">'black'</span>,<span class="string">'brown'</span>]);

alert(colors);  //<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>
alert(colors2); //<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>,<span class="string">'black'</span>,<span class="string">'brown'</span>
</code></pre>
<p>slice()方法可以基于当前数组中的一项或者多项创建一个新数组;(基于当前数组创建副本，不改变原有数组，可以接受两个参数，即返回项的起始和结束位置，但不包括结束位置);</p>
<p>下面看代码：</p>
<pre><code class="bash">var colors=[<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>,<span class="string">'purple'</span>];
var colors2=colors.slice(1);
var colors3=colors.slice(1,4);

alert(colors2);  //<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>,<span class="string">'purple'</span>
alert(colors3); //<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>
</code></pre>
<p>splice()方法主要用途插入项，有三种方式使用，<br><em>删除：指定2个参数，要删除第一项的位置和删除的项数，splice(0,2)会删除数组中的前两项
</em>插入：指定三个参数，起始位置，0和要插入的项，splice(2,0,’red’,’green’)<br>*替换：指定三个参数，起始位置，要删除的项和要插入的项splice(2,1,’red’,’green’)</p>
<p>下面看代码：</p>
<pre><code class="bash">var colors=[<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];
var removed=colors.splice(0,1);
alert(colors);  //green,blue
alert(removed);  //red

removed=colors.splice(1,0,<span class="string">'yellow'</span>,<span class="string">'orange'</span>);
alert(colors);  //green,yellow,orange,blue
alert(removed);  //[]

removed=colors.splice(1,1,<span class="string">'red'</span>,<span class="string">'purple'</span>);
alert(colors);  //green,red,purple,orange,blue
alert(removed);  //[yellow]
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用HEXO通过github搭建blog]]></title>
      <url>http://yoursite.com/2016/08/26/%E4%BD%BF%E7%94%A8HEXO%E9%80%9A%E8%BF%87github%E6%90%AD%E5%BB%BAblog/</url>
      <content type="html"><![CDATA[<p>本文介绍使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">HEXO</a> + <a href="https://github.com/" target="_blank" rel="external">GitHub</a> 搭建属于自己的博客，超级详细的教程，哈哈哈！</p>
<p>本文基于node v4.4.7 , hexo-cli:1.0.2;</p>
<h3 id="先介绍一下搭建步骤"><a href="#先介绍一下搭建步骤" class="headerlink" title="先介绍一下搭建步骤"></a>先介绍一下搭建步骤</h3><p>下载安装nodeJs–》》下载安装Git–》》下载安装hexo–》》进行一系列配置–》》然后登陆github创建项目–》》然后就可以看到你的博客了；nodeJs和Git的安装就不介绍了网上找找，我们从hexo下载安装开始介绍；</p>
<h3 id="hexo下载安装"><a href="#hexo下载安装" class="headerlink" title="hexo下载安装"></a>hexo下载安装</h3><p>当然是通过npm包管理器工具安装hexo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h3 id="建本地的博客"><a href="#建本地的博客" class="headerlink" title="建本地的博客"></a>建本地的博客</h3><p>我们在E:新建文件夹名为hexo，进入文件夹，右键Git Bash Here打开名称窗口，执行下列命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>全部安装工作已经结束，现在就剩启动命令博客就可以预览了</p>
<p>执行下列命令生成静态页</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate (hexo g也可以)</div></pre></td></tr></table></figure>
<p>执行下列命令启动本地服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo sever (hexo s也可以)</div></pre></td></tr></table></figure>
<p>浏览器输入<a href="http://localhost:4000就可以浏览" target="_blank" rel="external">http://localhost:4000就可以浏览</a></p>
<p>在这里我遇到的问题，我电脑里有装福*阅读器端口被占用；执行下列切换端口</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -p 5000</div></pre></td></tr></table></figure>
<p>浏览器输入<a href="http://localhost:5000就可以浏览" target="_blank" rel="external">http://localhost:5000就可以浏览</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hello hexo]]></title>
      <url>http://yoursite.com/2016/08/18/hello-hexo/</url>
      <content type="html"><![CDATA[<p>Hello Hexo</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
